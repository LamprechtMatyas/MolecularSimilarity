#!/usr/bin/env python3
""""
Takes 2 nbits as input arguments and input file with molecules that we want to compare.
We use atom pair fingerprints that are hashed and then we print the comparison of
each molecule to the output file.
"""
import argparse

from rdkit import DataStructs
from rdkit import Chem
from rdkit.Chem import AllChem
from rdkit.Chem.AtomPairs import Pairs

import inputoutput_utils


def _main():
    configuration = _read_configuration()
    molecules = _read_molecules(configuration["input_file"])
    inputoutput_utils.create_parent_directory(configuration["output_file"])
    with open(configuration["output_file"], "w", encoding="utf-8") as output_stream:
        for active_molecule in molecules:
            molecule_smiles = active_molecule.strip("\"")
            molecule = Chem.MolFromSmiles(molecule_smiles)
            pairs = AllChem.GetHashedAtomPairFingerprint(molecule, nBits=int(configuration["first_nbit"]))
            d = pairs.GetNonzeroElements()
            pairs2 = AllChem.GetHashedAtomPairFingerprint(molecule, nBits=int(configuration["second_nbit"]))
            d2 = pairs2.GetNonzeroElements()
            explain_score1 = _pairs_explain_score(d)
            explain_score2 = _pairs_explain_score(d2)
            output_stream.write(molecule_smiles + "\n\n")
            output_stream.write(configuration["first_nbit"] + 40*" " +
                                configuration["second_nbit"] + "\n")
            for i in range(min(len(explain_score1), len(explain_score2))):
                output_stream.write(str(explain_score1[i]) + 5*" " + str(explain_score2[i]) + "\n")
            if len(explain_score2) > len(explain_score1):
                for i in range(len(explain_score1), len(explain_score2)):
                    output_stream.write(43*" " + str(explain_score2[i]) + "\n")
            if len(explain_score2) < len(explain_score1):
                for i in range(len(explain_score2), len(explain_score1)):
                    output_stream.write(str(explain_score1) + "\n")
            output_stream.write(50*"-" + "\n\n")


def _read_configuration() -> dict:
    parser = argparse.ArgumentParser(description="ap analysis")
    parser.add_argument("-f", type=str, dest="first_nbit", help="write number",
                        required=True)
    parser.add_argument("-s", type=str, dest="second_nbit", help="write number",
                        required=True)
    parser.add_argument("-i", type=str, dest="input_file", help="input smi file with molecules",
                        required=True)
    parser.add_argument("-o", type=str, dest="output_file", help="output txt file",
                        required=True)
    return vars(parser.parse_args())


def _read_molecules(file: str) -> list:
    molecules = []
    with open(file, mode="r", encoding="utf-8") as input_sream:
        for new_line in input_sream:
            atributes = new_line.split("\t")
            molecules.append(atributes[0])
    return molecules


def _pairs_explain_score(non_zero_elements: list) -> list:
    explain_score = []
    for i, pair in enumerate(non_zero_elements):
        explain_score.append([pair])
        explain_score[i].append(Pairs.ExplainPairScore(pair))
    return explain_score


if __name__ == "__main__":
    _main()

